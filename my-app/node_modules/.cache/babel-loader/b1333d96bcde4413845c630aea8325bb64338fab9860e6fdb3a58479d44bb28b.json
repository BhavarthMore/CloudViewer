{"ast":null,"code":"var _jsxFileName = \"E:\\\\file sharing website\\\\my-app\\\\src\\\\screens\\\\ListFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fileCategories = {\n  documents: 'Document',\n  images: 'Image',\n  videos: 'Video'\n};\nexport default function FileTypeDropdowns() {\n  _s();\n  const [selectedDocument, setSelectedDocument] = useState('');\n  const [selectedImage, setSelectedImage] = useState('');\n  const [selectedVideo, setSelectedVideo] = useState('');\n  const [files, setFiles] = useState([]);\n  const [allFiles, setAllFiles] = useState([]);\n  const [fileUrls, setFileUrls] = useState({}); // Track signed URLs\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch all files when the component mounts\n  useEffect(() => {\n    const fetchFiles = async () => {\n      setLoading(true);\n      setError(null);\n      const email = localStorage.getItem('userEmail');\n      console.log('Fetching files for email:', email);\n      try {\n        const response = await fetch('http://localhost:5000/api/list-files', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email\n          })\n        });\n        const data = await response.json();\n        if (data.success) {\n          setAllFiles(data.files);\n        } else {\n          setError('Failed to fetch files.');\n        }\n      } catch (err) {\n        setError('Error fetching files.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchFiles();\n  }, []);\n\n  // Fetch signed URL for a file\n  const getSignedUrl = async (filename, contentType) => {\n    const email = localStorage.getItem('userEmail');\n    const file = filename.split('/').pop();\n    const encodedFilename = encodeURIComponent(filename);\n    try {\n      const response = await fetch('http://localhost:5000/api/download-url', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userMail: email,\n          filename: file,\n          contentType: contentType\n        })\n      });\n      const data = await response.json();\n      if (data.url) {\n        return data.url;\n      } else {\n        throw new Error('Failed to get signed URL.');\n      }\n    } catch (err) {\n      console.error('Error fetching signed URL:', err);\n      return '';\n    }\n  };\n\n  // Filter files based on selected categories\n  const filterFiles = type => {\n    return allFiles.filter(file => file.type === fileCategories[type]);\n  };\n  const handleFileSelect = (type, setSelectedFile) => async event => {\n    const selectedKey = event.target.value;\n    setSelectedFile(selectedKey);\n    const file = allFiles.find(file => file.Key === selectedKey);\n    if (file) {\n      const url = await getSignedUrl(file.Key, file.type);\n      if (url) {\n        setFileUrls(prevUrls => ({\n          ...prevUrls,\n          [file.Key]: url\n        }));\n      }\n    }\n  };\n  const renderFileOptions = (type, selectedFile, setSelectedFile) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedFile,\n      onChange: handleFileSelect(type, setSelectedFile),\n      className: \"form-select mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: [\"Select a \", type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), filterFiles(type).map((file, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: file.Key,\n        children: file.Key.split('/').pop()\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), selectedFile && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filterFiles(type).filter(file => file.Key === selectedFile).map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: fileUrls[file.Key],\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: file.Key.split('/').pop()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" (\", file.Size, \" bytes)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3 mt-3\",\n      style: {\n        margin: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Documents\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), renderFileOptions('documents', selectedDocument, setSelectedDocument), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Images\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), renderFileOptions('images', selectedImage, setSelectedImage), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Videos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), renderFileOptions('videos', selectedVideo, setSelectedVideo)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(FileTypeDropdowns, \"ernakfjvZQuARxinFwbIFBl/1ZU=\");\n_c = FileTypeDropdowns;\nvar _c;\n$RefreshReg$(_c, \"FileTypeDropdowns\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","fileCategories","documents","images","videos","FileTypeDropdowns","_s","selectedDocument","setSelectedDocument","selectedImage","setSelectedImage","selectedVideo","setSelectedVideo","files","setFiles","allFiles","setAllFiles","fileUrls","setFileUrls","loading","setLoading","error","setError","fetchFiles","email","localStorage","getItem","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","success","err","getSignedUrl","filename","contentType","file","split","pop","encodedFilename","encodeURIComponent","userMail","url","Error","filterFiles","type","filter","handleFileSelect","setSelectedFile","event","selectedKey","target","value","find","Key","prevUrls","renderFileOptions","selectedFile","children","onChange","className","fileName","_jsxFileName","lineNumber","columnNumber","map","index","href","rel","Size","style","margin","_c","$RefreshReg$"],"sources":["E:/file sharing website/my-app/src/screens/ListFile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst fileCategories = {\r\n  documents: 'Document',\r\n  images: 'Image',\r\n  videos: 'Video',\r\n};\r\n\r\nexport default function FileTypeDropdowns() {\r\n  const [selectedDocument, setSelectedDocument] = useState('');\r\n  const [selectedImage, setSelectedImage] = useState('');\r\n  const [selectedVideo, setSelectedVideo] = useState('');\r\n  const [files, setFiles] = useState([]);\r\n  const [allFiles, setAllFiles] = useState([]);\r\n  const [fileUrls, setFileUrls] = useState({}); // Track signed URLs\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch all files when the component mounts\r\n  useEffect(() => {\r\n    const fetchFiles = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const email = localStorage.getItem('userEmail');\r\n      console.log('Fetching files for email:', email);\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/list-files', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ email }),\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n          setAllFiles(data.files);\r\n        } else {\r\n          setError('Failed to fetch files.');\r\n        }\r\n      } catch (err) {\r\n        setError('Error fetching files.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchFiles();\r\n  }, []);\r\n\r\n  // Fetch signed URL for a file\r\n  const getSignedUrl = async (filename, contentType) => {\r\n    const email = localStorage.getItem('userEmail');\r\n    const file = filename.split('/').pop();\r\n    const encodedFilename = encodeURIComponent(filename);\r\n    \r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/download-url', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          userMail: email,\r\n          filename: file,\r\n          contentType: contentType,\r\n        }),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      if (data.url) {\r\n        return data.url;\r\n      } else {\r\n        throw new Error('Failed to get signed URL.');\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching signed URL:', err);\r\n      return '';\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  // Filter files based on selected categories\r\n  const filterFiles = (type) => {\r\n    return allFiles.filter(file => file.type === fileCategories[type]);\r\n  };\r\n\r\n  const handleFileSelect = (type, setSelectedFile) => async (event) => {\r\n    const selectedKey = event.target.value;\r\n    setSelectedFile(selectedKey);\r\n    \r\n    const file = allFiles.find(file => file.Key === selectedKey);\r\n    if (file) {\r\n      const url = await getSignedUrl(file.Key, file.type);\r\n      if (url) {\r\n        setFileUrls(prevUrls => ({\r\n          ...prevUrls,\r\n          [file.Key]: url\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const renderFileOptions = (type, selectedFile, setSelectedFile) => (\r\n    <div>\r\n      <select\r\n        value={selectedFile}\r\n        onChange={handleFileSelect(type, setSelectedFile)}\r\n        className=\"form-select mb-3\"\r\n      >\r\n        <option value=\"\">Select a {type}</option>\r\n        {filterFiles(type).map((file, index) => (\r\n          <option key={index} value={file.Key}>{file.Key.split('/').pop()}</option>\r\n        ))}\r\n      </select>\r\n      {selectedFile && (\r\n        <ul>\r\n          {filterFiles(type).filter(file => file.Key === selectedFile).map((file, index) => (\r\n            <li key={index}>\r\n              <a href={fileUrls[file.Key]} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {file.Key.split('/').pop()}\r\n              </a>\r\n              <span> ({file.Size} bytes)</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mb-3 mt-3\" style={{ margin: \"15px\" }}>\r\n        <h5>Documents</h5>\r\n        {renderFileOptions('documents', selectedDocument, setSelectedDocument)}\r\n\r\n        <h5>Images</h5>\r\n        {renderFileOptions('images', selectedImage, setSelectedImage)}\r\n\r\n        <h5>Videos</h5>\r\n        {renderFileOptions('videos', selectedVideo, setSelectedVideo)}\r\n      </div>\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p className=\"text-danger\">{error}</p>}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}