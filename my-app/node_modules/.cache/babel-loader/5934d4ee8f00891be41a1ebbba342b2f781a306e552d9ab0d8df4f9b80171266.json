{"ast":null,"code":"var _jsxFileName = \"E:\\\\file sharing website\\\\my-app\\\\src\\\\screens\\\\ListFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fileCategories = {\n  documents: 'Documents',\n  image: 'Images',\n  video: 'Videos'\n};\nexport default function FileTypeDropdowns() {\n  _s();\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch files based on selected category\n  useEffect(() => {\n    const fetchFiles = async () => {\n      setLoading(true);\n      setError(null);\n      const email = localStorage.getItem('userEmail');\n      const prefix = `uploads/user-upload/${email}/${selectedCategory}/`;\n      try {\n        const response = await fetch('http://localhost:5000/api/list-files', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            prefix\n          })\n        });\n        const data = await response.json();\n        if (data.success) {\n          setFiles(data.files);\n        } else {\n          setError('Failed to fetch files.');\n        }\n      } catch (err) {\n        setError('Error fetching files.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchFiles();\n  }, [selectedCategory]); // Fetch files when selectedCategory changes\n\n  const handleCategoryChange = event => {\n    setSelectedCategory(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \" mb-3 mt-3\",\n      style: {\n        'margin': \"15px\"\n      },\n      children: Object.entries(fileCategories).map(([key, label]) => /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCategory,\n        onChange: handleCategoryChange,\n        className: \"form-select me-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), key !== selectedCategory && /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 42\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(FileTypeDropdowns, \"frE332mSclwFuZiRb36/taocwkw=\");\n_c = FileTypeDropdowns;\nvar _c;\n$RefreshReg$(_c, \"FileTypeDropdowns\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","fileCategories","documents","image","video","FileTypeDropdowns","_s","selectedCategory","setSelectedCategory","files","setFiles","loading","setLoading","error","setError","fetchFiles","email","localStorage","getItem","prefix","response","fetch","method","headers","body","JSON","stringify","data","json","success","err","handleCategoryChange","event","target","value","children","className","style","Object","entries","map","key","label","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/file sharing website/my-app/src/screens/ListFile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst fileCategories = {\r\n  documents: 'Documents',\r\n  image: 'Images',\r\n  video: 'Videos',\r\n};\r\n\r\nexport default function FileTypeDropdowns() {\r\n  const [selectedCategory, setSelectedCategory] = useState('');\r\n  const [files, setFiles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch files based on selected category\r\n  useEffect(() => {\r\n    const fetchFiles = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const email = localStorage.getItem('userEmail');\r\n      const prefix = `uploads/user-upload/${email}/${selectedCategory}/`;\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/list-files', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ email, prefix }),\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n          setFiles(data.files);\r\n        } else {\r\n          setError('Failed to fetch files.');\r\n        }\r\n      } catch (err) {\r\n        setError('Error fetching files.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchFiles();\r\n  }, [selectedCategory]); // Fetch files when selectedCategory changes\r\n\r\n  const handleCategoryChange = (event) => {\r\n    setSelectedCategory(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\" mb-3 mt-3\" style={{'margin': \"15px\"}}>\r\n        {Object.entries(fileCategories).map(([key, label]) => (\r\n          <select\r\n            key={key}\r\n            value={selectedCategory}\r\n            onChange={handleCategoryChange}\r\n            className=\"form-select me-2\"\r\n          >\r\n            <option value={key}>{label}</option>\r\n            {key !== selectedCategory && <option value={key}>{label}</option>}\r\n          </select>\r\n        ))}\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}