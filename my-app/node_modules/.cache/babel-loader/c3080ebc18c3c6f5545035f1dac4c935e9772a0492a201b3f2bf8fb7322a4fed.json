{"ast":null,"code":"var _jsxFileName = \"E:\\\\file sharing website\\\\my-app\\\\src\\\\screens\\\\ListFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileList = () => {\n  _s();\n  const [fileGroups, setFileGroups] = useState({});\n  useEffect(async () => {\n    // Fetch the categorized files from the backend\n    const response = await fetch('http://localhost:5000/api/filelist', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userMail: userMail,\n        filename: file.name,\n        contentType: file.type\n      }) // Send filename and contentType\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n    tr.then(data => {\n      setFileGroups(data);\n    }).catch(error => {\n      console.error('Error fetching files:', error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.keys(fileGroups).map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: category.charAt(0).toUpperCase() + category.slice(1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        children: fileGroups[category].map(file => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: file.Key,\n          children: file.Key\n        }, file.Key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this)]\n    }, category, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(FileList, \"uXa6BMi8luudNIjU7PX3nEcDQPs=\");\n_c = FileList;\nexport default FileList;\nvar _c;\n$RefreshReg$(_c, \"FileList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FileList","_s","fileGroups","setFileGroups","response","fetch","method","headers","body","JSON","stringify","userMail","filename","file","name","contentType","type","ok","Error","json","tr","then","data","catch","error","console","children","Object","keys","map","category","charAt","toUpperCase","slice","fileName","_jsxFileName","lineNumber","columnNumber","value","Key","_c","$RefreshReg$"],"sources":["E:/file sharing website/my-app/src/screens/ListFile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst FileList = () => {\r\n  const [fileGroups, setFileGroups] = useState({});\r\n\r\n  useEffect(async () => {\r\n    // Fetch the categorized files from the backend\r\n    const response = await fetch('http://localhost:5000/api/filelist', {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ userMail: userMail, filename: file.name, contentType: file.type }), // Send filename and contentType\r\n      });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      \r\ntr\r\n\r\n      .then(data => {\r\n        setFileGroups(data);\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching files:', error);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {Object.keys(fileGroups).map(category => (\r\n        <div key={category}>\r\n          <h3>{category.charAt(0).toUpperCase() + category.slice(1)}</h3>\r\n          <select>\r\n            {fileGroups[category].map(file => (\r\n              <option key={file.Key} value={file.Key}>\r\n                {file.Key}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEhDC,SAAS,CAAC,YAAY;IACpB;IACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MAC/DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,QAAQ,EAAEA,QAAQ;QAAEC,QAAQ,EAAEC,IAAI,CAACC,IAAI;QAAEC,WAAW,EAAEF,IAAI,CAACG;MAAK,CAAC,CAAC,CAAE;IAC7F,CAAC,CAAC;IAEA,IAAI,CAACZ,QAAQ,CAACa,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAOd,QAAQ,CAACe,IAAI,CAAC,CAAC;IAE9BC,EAAE,CAEKC,IAAI,CAACC,IAAI,IAAI;MACZnB,aAAa,CAACmB,IAAI,CAAC;IACrB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEzB,OAAA;IAAA2B,QAAA,EACGC,MAAM,CAACC,IAAI,CAAC1B,UAAU,CAAC,CAAC2B,GAAG,CAACC,QAAQ,iBACnC/B,OAAA;MAAA2B,QAAA,gBACE3B,OAAA;QAAA2B,QAAA,EAAKI,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,QAAQ,CAACG,KAAK,CAAC,CAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC/DtC,OAAA;QAAA2B,QAAA,EACGxB,UAAU,CAAC4B,QAAQ,CAAC,CAACD,GAAG,CAAChB,IAAI,iBAC5Bd,OAAA;UAAuBuC,KAAK,EAAEzB,IAAI,CAAC0B,GAAI;UAAAb,QAAA,EACpCb,IAAI,CAAC0B;QAAG,GADE1B,IAAI,CAAC0B,GAAG;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEb,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA,GARDP,QAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACpC,EAAA,CA5CID,QAAQ;AAAAwC,EAAA,GAARxC,QAAQ;AA8Cd,eAAeA,QAAQ;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}