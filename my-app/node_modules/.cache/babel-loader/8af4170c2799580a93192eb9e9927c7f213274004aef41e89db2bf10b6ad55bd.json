{"ast":null,"code":"var _jsxFileName = \"E:\\\\file sharing website\\\\my-app\\\\src\\\\screens\\\\ListFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fileTypes = {\n  documents: 'Documents',\n  images: 'Images',\n  videos: 'Videos'\n  // Add more types as needed\n};\nexport default function DropdownMenu() {\n  _s();\n  const [selectedType, setSelectedType] = useState('documents');\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch files based on selected type\n  useEffect(() => {\n    const fetchFiles = async () => {\n      setLoading(true);\n      setError(null);\n      const email = localStorage.getItem('userEmail');\n      const prefix = `uploads/user-upload/${email}/${selectedType}/`;\n      try {\n        const response = await fetch('http://localhost:5000/api/list-files', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            prefix\n          })\n        });\n        const data = await response.json();\n        if (data.success) {\n          setFiles(data.files);\n        } else {\n          setError('Failed to fetch files.');\n        }\n      } catch (err) {\n        setError('Error fetching files.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchFiles();\n  }, [selectedType]); // Fetch files when selectedType changes\n\n  const handleChange = event => {\n    setSelectedType(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedType,\n      onChange: handleChange,\n      className: \"form-select mb-3\",\n      children: Object.entries(fileTypes).map(([key, label]) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: key,\n        children: label\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: files.length > 0 ? files.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://your-bucket-name.s3.amazonaws.com/${file.Key}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: file.Key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" (\", file.Size, \" bytes)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No files found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(DropdownMenu, \"sDLPTgS6McuPSDxla4NeCXjI4QY=\");\n_c = DropdownMenu;\nvar _c;\n$RefreshReg$(_c, \"DropdownMenu\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","fileTypes","documents","images","videos","DropdownMenu","_s","selectedType","setSelectedType","files","setFiles","loading","setLoading","error","setError","fetchFiles","email","localStorage","getItem","prefix","response","fetch","method","headers","body","JSON","stringify","data","json","success","err","handleChange","event","target","value","children","onChange","className","Object","entries","map","key","label","fileName","_jsxFileName","lineNumber","columnNumber","length","file","index","href","Key","rel","Size","_c","$RefreshReg$"],"sources":["E:/file sharing website/my-app/src/screens/ListFile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst fileTypes = {\r\n  documents: 'Documents',\r\n  images: 'Images',\r\n  videos: 'Videos',\r\n  // Add more types as needed\r\n};\r\n\r\nexport default function DropdownMenu() {\r\n  const [selectedType, setSelectedType] = useState('documents');\r\n  const [files, setFiles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch files based on selected type\r\n  useEffect(() => {\r\n    const fetchFiles = async () => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const email = localStorage.getItem('userEmail');\r\n      const prefix = `uploads/user-upload/${email}/${selectedType}/`;\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/list-files', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ email, prefix }),\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n          setFiles(data.files);\r\n        } else {\r\n          setError('Failed to fetch files.');\r\n        }\r\n      } catch (err) {\r\n        setError('Error fetching files.');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchFiles();\r\n  }, [selectedType]); // Fetch files when selectedType changes\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedType(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <select value={selectedType} onChange={handleChange} className=\"form-select mb-3\">\r\n        {Object.entries(fileTypes).map(([key, label]) => (\r\n          <option key={key} value={key}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </select>\r\n\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p className=\"text-danger\">{error}</p>}\r\n\r\n      <ul>\r\n        {files.length > 0 ? (\r\n          files.map((file, index) => (\r\n            <li key={index}>\r\n              <a href={`https://your-bucket-name.s3.amazonaws.com/${file.Key}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {file.Key}\r\n              </a>\r\n              <span> ({file.Size} bytes)</span>\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No files found.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}