{"ast":null,"code":"var _jsxFileName = \"E:\\\\file sharing website\\\\my-app\\\\src\\\\screens\\\\ListFile.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MyUploads() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchFiles = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:5000/api/list-files', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: localStorage.getItem('userEmail')\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setFiles(data.files);\n      } else {\n        setError('Failed to fetch files.');\n      }\n    } catch (err) {\n      setError('Error fetching files.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchFiles,\n      className: \"btn btn-primary\",\n      children: \"My Uploads\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: files.length > 0 ? files.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://your-bucket-name.s3.amazonaws.com/${file.Key}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: file.Key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" (\", file.Size, \" bytes)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No files found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(MyUploads, \"/rVBlMH0I09/i6Z0fLCxboWnMeQ=\");\n_c = MyUploads;\nvar _c;\n$RefreshReg$(_c, \"MyUploads\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MyUploads","_s","files","setFiles","loading","setLoading","error","setError","fetchFiles","response","fetch","method","headers","body","JSON","stringify","email","localStorage","getItem","data","json","success","err","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","length","map","file","index","href","Key","target","rel","Size","_c","$RefreshReg$"],"sources":["E:/file sharing website/my-app/src/screens/ListFile.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nexport default function MyUploads() {\r\n  const [files, setFiles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchFiles = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/list-files', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email: localStorage.getItem('userEmail') }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        setFiles(data.files);\r\n      } else {\r\n        setError('Failed to fetch files.');\r\n      }\r\n    } catch (err) {\r\n      setError('Error fetching files.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={fetchFiles} className=\"btn btn-primary\">\r\n        My Uploads\r\n      </button>\r\n\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p className=\"text-danger\">{error}</p>}\r\n\r\n      <ul>\r\n        {files.length > 0 ? (\r\n          files.map((file, index) => (\r\n            <li key={index}>\r\n              <a href={`https://your-bucket-name.s3.amazonaws.com/${file.Key}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {file.Key}\r\n              </a>\r\n              <span> ({file.Size} bytes)</span>\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No files found.</p>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}